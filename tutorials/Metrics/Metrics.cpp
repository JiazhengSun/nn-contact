#include "dart/dart.hpp"
#include "dart/gui/gui.hpp"
#include "dart/collision/bullet/bullet.hpp"
#include "dart/collision/ode/ode.hpp"
#include <dart/utils/utils.hpp>
#include <iostream>
#include <fstream>
#include <string>
#include <typeinfo>
#include <math.h>
#include <stdio.h>

using namespace dart::dynamics;
using namespace dart::simulation;
using namespace dart;
using namespace utils;
using namespace std;



//const unsigned int testSize = 61884;// 127008

class MyWindow : public dart::gui::SimWindow
{
public:
    
    MyWindow(const WorldPtr& world)
    {
        setWorld(world);
    }
    
    void keyboard(unsigned char key, int x, int y) override
    {
        switch(key)
        {
            default:
                SimWindow::keyboard(key, x, y);
        }
    }
    
    void drawWorld() const override
    {
        // Make sure lighting is turned on and that polygons get filled in
        glEnable(GL_LIGHTING);
        glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
        
        SimWindow::drawWorld();
    }
    
    void timeStepping() override
    {
        SimWindow::timeStepping();
    }
protected:
};

double distanceError(vector<vector<double>> ground_truth, vector<vector<double>> my_results)
{
    if (ground_truth.size() != my_results.size())
    {
        cout<<"Something wrong with metric1's vec size!!"<<endl;
    }
    
    int N = ground_truth.size(); //N is the number of testing trajectories
    double sum = 0;
    for (int i=0; i<N; i++)
    {
        Eigen::Vector3d x_i (my_results[i][0], my_results[i][1], my_results[i][2]); //final position of trajectory i
        Eigen::Vector3d x_gs(ground_truth[i][0], ground_truth[i][1], ground_truth[i][2]); //final position of corresponding ground truth
        Eigen::Vector3d result = x_i - x_gs; // The real metric
        //Eigen::Vector3d result = x_gs; // For average
        //double vec_norm = sqrt(pow(result[0], 2) + pow(result[1], 2) + pow(result[2],2));
        sum += result.norm();
    }
    sum /= N;
    return sum;
}

double orientationError(vector<Eigen::Quaterniond> q_gs_vec, vector<Eigen::Quaterniond> q_i_vec)
{
    if(q_gs_vec.size() != q_i_vec.size())
    {
        cout<<"Something wrong with metric2's vec size!!"<<endl;
    }

    int N = q_gs_vec.size();
    double sum = 0;
    for (int i=0; i<N; i++)
    {
        Eigen::Quaterniond q_gs = q_gs_vec[i];
        Eigen::Quaterniond q_i = q_i_vec[i];
        Eigen::Quaterniond invert_qgs = q_gs.inverse();
        double sc = (invert_qgs * q_i).w();
        sum += 2 * acos(sc);
    }
    sum /= N;
    return sum;
}

double impulseError(vector<vector<double>> gs_vec, vector<vector<double>> my_vec)
{
    if(gs_vec.size() != my_vec.size())
    {
        cout<<"There is something wrong with metric3's vec size!!"<<endl;
    }
    int N = gs_vec.size();
    double sum = 0;
    for(int i = 0; i < N; i++)
    {
        Eigen::Vector6d imp_gs;
        imp_gs<<gs_vec[i][0], gs_vec[i][1], gs_vec[i][2], gs_vec[i][3], gs_vec[i][4], gs_vec[i][5];
        
        Eigen::Vector6d imp_i;
        imp_i<<my_vec[i][0], my_vec[i][1], my_vec[i][2], my_vec[i][3], my_vec[i][4], my_vec[i][5];
        
        Eigen::Vector6d result = imp_i - imp_gs;
        sum += result.norm();
    }
    sum /= N;
    return sum;
}

int main(int argc, char* argv[])
{

    WorldPtr world = SkelParser::readWorld(DART_DATA_PATH"/NN-contact-force/skel/singleBody_genData.skel");
    assert(world != nullptr);
    world->setGravity(Eigen::Vector3d(0.0, 0.0, 0));

    //Deal with first metric -- distance error
    double totalLinearPositionGS[] = {0.256017, 0.0597212, 0.75846,
        -1.46263, 0.059325, -0.082602,
        -0.694955, 0.0587674, 0.256662,
        -0.67676, 0.0593945, 0.143253,
        0.0635245, 0.060071, -0.627743,
        -0.446468, 0.0600482, -0.147131,
        -0.0217712, 0.0613949, -0.435375,
        -0.29282, 0.0600609, -0.353603,
        0.871546, 0.0601681, -1.0481,
        0.873947, 0.0591838, -0.473498,
        -0.677922, 0.0604297, -0.108358,
        -1.6519, 0.0600191, -0.0150249,
        -0.835357, 0.0597041, -0.553067,
        0.280372, 0.0599746, 0.669379,
        -0.271508, 0.150809, -0.23333,
        -0.668046, 0.0595291, 0.854781,
        -0.690692, 0.111794, -0.484706,
        0.151413, 0.0601324, -0.244838,
        -0.589716, 0.0588207, 0.586731,
        -0.313566, 0.0590889, -0.364863,
        -0.476444, 0.0588861, 1.05846,
        0.281507, 0.111167, -0.0716146,
        0.0401546, 0.111335, 0.0224489,
        0.383629, 0.11069, 0.542375,
        0.341283, 0.0605927, 0.159719,
        -0.663637, 0.059986, 0.0509061,
        -0.0896015, 0.0592349, 0.406287,
        -1.03282, 0.0589124, 0.505871,
        0.336681, 0.0570923, 0.517769,
        -0.111319, 0.0602502, 0.811996,
        -0.310286, 0.0599975, -0.5306,
        -0.188896, 0.111504, 0.219032,
        -0.721947, 0.0601532, 0.281778,
        0.327716, 0.0592153, -0.648402,
        -0.530303, 0.0592154, 0.467073,
        -0.451744, 0.06002, -0.758774,
        -0.2656, 0.110983, -0.110444,
        0.40685, 0.0587681, 0.101175,
        -0.0165576, 0.111386, 0.319318,
        0.125217, 0.110949, 0.472853,
        -0.490306, 0.111394, 0.724859,
        -0.130919, 0.0585699, 0.27549,
        -0.102493, 0.0594963, -0.722027,
        -0.148169, 0.0599969, -1.03416,
        -0.110386, 0.0615025, -0.466574,
        0.533347, 0.0600481, -0.295628,
        -0.0406542, 0.060059, 0.111486,
        -0.217791, 0.151224, -0.923249,
        0.400597, 0.0617263, 0.337497,
        0.218767, 0.0596822, 0.0922823}; // x y z
    double totalLinearPositionMy[] = {0.252336, 0.0589853, 0.764126,
        -1.50021, 0.153172, -0.440029,
        -0.693577, 0.058115, 0.24165,
        -0.649059, 0.0584857, 0.184373,
        0.166662, 0.109972, -0.70984,
        -0.453039, 0.0589284, -0.119115,
        -0.0317378, 0.0598138, -0.441897,
        -0.289646, 0.0576614, -0.379807,
        0.887409, 0.0583089, -1.05722,
        0.878163, 0.0594041, -0.465738,
        -0.673701, 0.0587633, -0.0841945,
        -1.65555, 0.0584423, -0.00621425,
        -0.782906, 0.059776, -0.554769,
        0.282911, 0.0597986, 0.676963,
        -0.242701, 0.105288, -0.333737,
        -0.669719, 0.0588006, 0.846974,
        -0.682461, 0.0599203, -0.655223,
        0.147478, 0.0572104, -0.237942,
        -0.595214, 0.0575372, 0.569249,
        -0.318164, 0.0599218, -0.381146,
        -0.469168, 0.0583028, 1.09425,
        0.279778, 0.109969, -0.0709876,
        0.0391394, 0.109987, 0.0230067,
        0.376107, 0.109989, 0.540611,
        0.281138, 0.0584698, 0.163477,
        -0.67328, 0.0590563, 0.0464191,
        -0.0847274, 0.0595356, 0.385958,
        -1.04429, 0.0587411, 0.441194,
        0.337888, 0.056022, 0.517697,
        -0.0198852, 0.0585693, 0.758983,
        -0.313962, 0.0598117, -0.580075,
        -0.18577, 0.109962, 0.218477,
        -0.711292, 0.0583753, 0.293691,
        0.260636, 0.151987, -0.473701,
        -0.552153, 0.0590974, 0.420222,
        -0.44622, 0.0590916, -0.758703,
        -0.277126, 0.109982, -0.100332,
        0.408929, 0.0578697, 0.109922,
        -0.0133035, 0.109978, 0.33169,
        -0.0476046, 0.0590665, 0.423823,
        -0.485729, 0.109977, 0.72195,
        -0.153113, 0.058634, 0.277251,
        -0.097124, 0.0587054, -0.723071,
        -0.139658, 0.0598169, -0.980935,
        -0.121945, 0.0596428, -0.473801,
        0.504392, 0.0593098, -0.301495,
        -0.0424982, 0.0591175, 0.11327,
        -0.214407, 0.149993, -0.91087,
        0.402401, 0.0591025, 0.35122,
        0.215481, 0.0598522, 0.087881}; // x y z

    vector<vector<double>> linearPosGS;
    vector<vector<double>> linearPosMy;
    for (int i=0; i < sizeof(totalLinearPositionGS)/sizeof(double); i+=3)
    {
        double indiGs[] = {totalLinearPositionGS[i], totalLinearPositionGS[i+1], totalLinearPositionGS[i+2]};
        double indiMy[] = {totalLinearPositionMy[i], totalLinearPositionMy[i+1], totalLinearPositionMy[i+2]};

        vector<double> vec_GS (indiGs, indiGs+sizeof(indiGs)/sizeof(double));
        vector<double> vec_my (indiMy, indiMy+sizeof(indiMy)/sizeof(double));

        linearPosGS.push_back(vec_GS);
        linearPosMy.push_back(vec_my);
    }
    double dist_error = distanceError(linearPosGS, linearPosMy);
    cout<<"Distance error of the data set is: "<<dist_error<<endl;
    

    // Deal with Third metric -- impulse error
    double totalImpGS[] = {-0.134342, 0.121998, 0.113073, 0.362261, -0.490346, 0.959448,
        -0.0238907, 0.024588, 0.0143721, -0.582099, -0.332737, -0.398368,
        -0.068246, 0.0755873, 0.0331283, -1.77613, -1.08413, -1.18531,
        0.0279567, -0.00767916, 0.0559785, -1.52647, -0.744479, 0.660221,
        -0.100044, 0.00032536, 0.253206, -1.17021, 0.857995, -0.46346,
        0.0333068, -0.0348614, -0.147225, 1.77245, -0.318114, 0.47631,
        0.0103772, 0.0129759, -0.049155, 1.73502, 1.59274, 0.786734,
        0.0552962, -0.015295, 0.167516, 0.123826, 1.03806, 0.0539055,
        0.0572225, -0.00446363, 0.151837, -1.22136, 1.91109, 0.516474,
        0.0376651, -0.149312, 0.180916, 2.36287, 0.516155, -0.0659406,
        0.0375797, 0.0531448, 0.00351095, -1.3838, 1.03855, -0.908746,
        0.0337136, -0.0193798, -0.0487298, 0.97782, 1.04244, 0.261925,
        0.00598989, 0.0318167, 0.0433949, -0.568663, 0.706228, -0.439306,
        -0.107777, 0.155947, -0.0160742, 0.174214, 0.0182573, -0.990975,
        0.0215456, 0.0120573, 0.0775933, -2.09684, -1.01959, 0.740671,
        -0.0558217, -0.0761747, -0.00233008, 1.38541, -0.984053, -1.01965,
        -0.0106335, 0.0821937, 0.000368281, -2.6613, -1.86694, 0.515142,
        0.00678504, 0.0473944, 0.0692999, -0.695598, 0.960961, -0.589099,
        0.00483142, -0.0811395, 0.168284, 0.0125686, -1.13762, -0.548875,
        0.0451804, -0.073812, -0.0218836, -1.47584, -1.22372, 1.08053,
        0.104715, -0.10336, -0.0777312, 1.73939, 1.76337, -0.00157551,
        -0.026584, -0.0635232, -0.182822, -0.808467, -1.81511, 0.748236,
        -0.0105806, -0.0945209, -0.194208, 0.77758, 1.8474, -0.94149,
        0.0215315, 0.123295, 0.174891, -0.424624, 1.48247, -0.992837,
        0.00776168, -0.0226934, 0.0608221, -1.71881, 1.66266, 0.8397,
        -0.026329, 0.0645312, 0.186609, 0.299785, 1.03091, -0.314201,
        -0.00786752, -0.0274009, -0.0703085, -0.352376, -0.726518, 0.322572,
        0.0515615, 0.0432684, 0.207478, 1.49002, -0.295501, -0.308668,
        -0.0880765, 0.135794, -0.032356, -0.450219, -0.113685, 0.748423,
        0.0240638, -0.0435161, -0.144642, -1.14411, -0.128273, -0.151752,
        0.0337708, 0.0137425, -0.0591291, -1.61601, 0.79624, -0.737902,
        -0.0789852, 0.0478352, -0.113689, -1.30207, -1.70202, 0.188478,
        0.00947595, 0.0984248, -0.157987, 2.22563, -0.572271, -0.22303,
        -0.0584179, 0.0170548, -0.114793, -1.66146, -1.9838, 0.550778,
        0.00564838, -0.0334353, 0.0467184, -1.63491, -0.882767, -0.434112,
        -0.0248221, 0.0564357, 0.164493, -0.976312, 1.82135, -0.772211,
        0.0257142, 0.00279596, -0.069146, 1.00013, 1.19378, 0.420203,
        -0.0450723, -0.0428436, 0.0346892, -0.950335, 0.924383, -0.0931102,
        0.0455168, 0.057814, -0.00940924, -1.05144, 0.698788, -0.792656,
        0.00226057, -0.0205231, 0.0429104, 1.40791, -1.29924, -0.695566,
        -0.0564179, -0.0367782, 0.0871566, -2.89284, -1.52275, -0.927295,
        -0.0387535, 0.0929834, 0.0744321, 1.33194, 0.483304, 0.0897236,
        0.0561098, -0.00142172, 0.144905, 2.07763, 0.553957, -0.799063,
        -0.0821879, -0.0513463, -0.111337, -0.884006, -0.0949174, 0.69634,
        0.00048742, -0.0439219, -0.08163, -1.60459, 0.631285, -0.349251,
        0.0289075, -0.0114415, 0.0930727, -0.585128, -0.196674, 0.157558,
        0.0448433, 0.0507955, -0.0191285, 1.41988, -0.913479, 0.902917,
        -0.0338671, -0.0357783, 0.0185294, -2.24761, 1.78581, -0.659867,
        0.0803001, 0.0171898, -0.169214, -1.70828, 0.124296, -0.798036,
        -0.0502151, -0.114853, 0.0873347, -1.04921, 1.34757, 1.16892};

    double totalImpMy[] = {-0.134333, 0.121986, 0.113075, 0.361632, -0.490816, 0.959115,
        -0.0236517, 0.0244737, 0.0142608, -0.583623, -0.332918, -0.396607,
        -0.0677338, 0.075377, 0.0311434, -1.76132, -1.08401, -1.20704,
        0.0278778, -0.00748954, 0.0559638, -1.52589, -0.745891, 0.660285,
        -0.100349, -0.000618687, 0.252007, -1.16795, 0.82355, -0.463054,
        0.0333077, -0.0348794, -0.147215, 1.77215, -0.318141, 0.476329,
        0.00993071, 0.0138929, -0.0502971, 1.72522, 1.60048, 0.782708,
        0.0539437, -0.0173618, 0.166689, 0.100557, 1.03752, 0.0755224,
        0.0570993, -0.00482237, 0.151589, -1.22165, 1.90647, 0.520811,
        0.0374851, -0.149574, 0.180505, 2.35319, 0.522302, -0.0558816,
        0.0375235, 0.0532029, 0.00372995, -1.38289, 1.03899, -0.907843,
        0.0336338, -0.0192053, -0.0488746, 0.976957, 1.04227, 0.262748,
        0.00512001, 0.0314354, 0.0448316, -0.573515, 0.719455, -0.438975,
        -0.107691, 0.154605, -0.0142133, 0.134636, 0.00397796, -0.976844,
        0.0217038, 0.012272, 0.0767582, -2.08819, -1.01962, 0.753463,
        -0.0553705, -0.0740403, -0.00268579, 1.39089, -1.00208, -1.04996,
        -0.0120745, 0.0873232, 0.00700967, -2.61151, -1.7866, 0.460974,
        0.00757882, 0.0472866, 0.067745, -0.708969, 0.971543, -0.598831,
        0.00814675, -0.0827155, 0.172012, 0.0171134, -1.1593, -0.558282,
        0.045335, -0.0737243, -0.0218237, -1.47239, -1.22524, 1.08045,
        0.104709, -0.101007, -0.0765932, 1.72394, 1.77485, 0.0161976,
        -0.0265636, -0.0634901, -0.182807, -0.810372, -1.81299, 0.747416,
        -0.00873967, -0.0938904, -0.193982, 0.781961, 1.86665, -0.93872,
        0.0210647, 0.123508, 0.173769, -0.435244, 1.47764, -0.997481,
        0.0075863, -0.0228163, 0.0607956, -1.71737, 1.66471, 0.839055,
        -0.02699, 0.0645611, 0.185837, 0.280551, 1.03318, -0.318187,
        -0.00772734, -0.0275474, -0.0698219, -0.35171, -0.7234, 0.324333,
        0.0513358, 0.0431472, 0.207443, 1.48924, -0.290841, -0.308049,
        -0.0873809, 0.135812, -0.030536, -0.394165, -0.0854808, 0.747746,
        0.0246803, -0.04175, -0.138243, -1.14094, -0.0849269, -0.178043,
        0.0337337, 0.0140648, -0.0585488, -1.61741, 0.795775, -0.740729,
        -0.0798006, 0.0477298, -0.111997, -1.30541, -1.70394, 0.203963,
        0.00943325, 0.0986913, -0.157351, 2.21956, -0.578671, -0.229882,
        -0.0584241, 0.0170518, -0.114799, -1.66136, -1.98365, 0.550865,
        0.00540809, -0.0325514, 0.0461574, -1.63325, -0.889998, -0.436289,
        -0.0248929, 0.0556265, 0.164214, -0.98384, 1.81624, -0.764379,
        0.0255191, 0.00282281, -0.068973, 1.00182, 1.19449, 0.419548,
        -0.0450906, -0.0428086, 0.0342441, -0.951233, 0.925865, -0.0951026,
        0.0459834, 0.0566796, -0.0110458, -1.06164, 0.704898, -0.80252,
        0.00134629, -0.020783, 0.0414679, 1.41389, -1.31331, -0.704111,
        -0.0575213, -0.0366026, 0.0854099, -2.9027, -1.53985, -0.932742,
        -0.0384424, 0.0928846, 0.0741825, 1.33349, 0.483343, 0.0858343,
        0.0570478, 0.00073793, 0.143972, 2.06446, 0.55412, -0.820863,
        -0.0820515, -0.0512231, -0.11122, -0.88534, -0.0922143, 0.695623,
        0.000513265, -0.0438516, -0.0816778, -1.60374, 0.631557, -0.349152,
        0.0297626, -0.0104007, 0.0934745, -0.596853, -0.185471, 0.169403,
        0.0447956, 0.0505465, -0.0193205, 1.42096, -0.913235, 0.905361,
        -0.0342983, -0.0353039, 0.0210219, -2.26466, 1.8009, -0.670505,
        0.0802922, 0.0172098, -0.169179, -1.70771, 0.124461, -0.797817,
        -0.049286, -0.114785, 0.0872245, -1.04668, 1.34906, 1.1839};
    vector<vector<double>> ImpGSFinal;
    vector<vector<double>> ImpMyFinal;
    for (int i=0; i < sizeof(totalImpGS)/sizeof(double); i+=6)
    {
        double indiGs[] = {totalImpGS[i], totalImpGS[i+1], totalImpGS[i+2], totalImpGS[i+3], totalImpGS[i+4], totalImpGS[i+5]};
        double indiMy[] = {totalImpMy[i], totalImpMy[i+1], totalImpMy[i+2], totalImpMy[i+3], totalImpMy[i+4], totalImpMy[i+5]};

        vector<double> vec_gs (indiGs, indiGs+sizeof(indiGs)/sizeof(double));
        vector<double> vec_my (indiMy, indiMy+sizeof(indiMy)/sizeof(double));

        ImpGSFinal.push_back(vec_gs);
        ImpMyFinal.push_back(vec_my);
    }
    double imp_error = impulseError(ImpGSFinal, ImpMyFinal);
    cout<<"The impulse error of data sets is: "<<imp_error<<endl;



    // Deal with second metric -- orientation error
    double quatGsTotal[] = {0.304409, -0.302555, -0.631112, -0.646137,
        0.258225, 0.257023, 0.661136, -0.655864,
        0.612565, 0.616221, -0.348325, 0.351718,
        0.456595, 0.460317, -0.536231, 0.540449,
        0.62449, 0.624044, -0.332209, 0.331991,
        0.2652, -0.258043, -0.659291, -0.654537,
        0.240381, -0.237958, 0.669441, 0.661393,
        0.342965, 0.34276, -0.618597, 0.618246,
        0.688169, -0.689356, -0.159898, -0.160138,
        0.622134, -0.619097, 0.343518, 0.334162,
        0.70409, -0.706857, -0.0479267, -0.0481124,
        0.700026, 0.699692, -0.10107, 0.100895,
        0.568619, -0.567649, 0.420422, 0.421536,
        0.339947, 0.34026, 0.621476, -0.618407,
        0.679943, -0.185203, 0.183709, -0.685294,
        0.469493, 0.474665, 0.525063, -0.527805,
        0.0153884, 0.99661, -0.00126433, 0.0808095,
        0.573638, -0.574375, -0.412657, -0.413216,
        0.682833, 0.675415, -0.196482, 0.197355,
        0.681598, 0.674467, 0.201616, -0.199674,
        0.692119, -0.685019, -0.161712, -0.159902,
        0.00217623, 0.218172, -0.00973619, 0.975859,
        0.432037, -0.00491507, 0.901784, 0.0102624,
        0.181358, 0.00105822, 0.9834, -0.00574208,
        0.707819, 0.704436, 0.0370851, -0.0372337,
        0.672771, 0.677859, -0.210516, 0.208733,
        0.0884739, -0.0884239, -0.704479, -0.698615,
        0.547845, -0.537785, -0.45396, -0.452298,
        0.639946, -0.639013, -0.301959, -0.301584,
        0.0647102, 0.0648867, 0.703311, -0.704951,
        0.644538, -0.644516, -0.290767, -0.290904,
        0.00746847, 0.579754, 0.0104842, -0.81469,
        0.0651492, -0.0659051, -0.704081, -0.704047,
        0.430343, 0.427233, -0.560778, 0.563742,
        0.673468, -0.676671, 0.207985, 0.212839,
        0.573635, 0.573849, -0.413258, 0.41335,
        0.0757073, -0.000638498, 0.997095, 0.00837289,
        0.319136, -0.322986, -0.626289, -0.633715,
        0.373114, -0.00443361, 0.92771, 0.011011,
        0.0064852, -0.788354, 0.00508879, 0.615167,
        0.0108574, -0.911661, 0.00488924, 0.410771,
        0.381395, -0.373444, -0.596444, -0.599443,
        0.21945, 0.222411, 0.671813, -0.671596,
        0.489828, -0.489413, -0.5117, -0.508632,
        0.709045, -0.700755, -0.0580862, -0.0531469,
        0.594678, -0.594951, 0.382263, 0.382448,
        0.699987, -0.699358, -0.102272, -0.102258,
        0.475968, -0.532469, 0.522696, -0.465532,
        0.0187827, -0.0183664, -0.701563, -0.712123,
        0.58559, -0.587897, -0.394542, -0.394712};//order in w x y z


    double quatMyTotal[] = {0.309788, -0.305723, -0.626605, -0.646476,
        0.517171, 0.511357, -0.482201, -0.488396,
        0.594972, 0.600073, -0.377911, 0.378289,
        0.497968, 0.504772, -0.495213, 0.501993,
        0.877966, -0.000117366, -0.478724, -7.3633e-05,
        0.242671, -0.246783, -0.665106, -0.661697,
        0.202968, -0.198887, 0.67908, 0.676829,
        0.282506, 0.287815, -0.640947, 0.6531,
        0.698839, -0.697009, -0.114077, -0.113089,
        0.62283, -0.616173, 0.341488, 0.340292,
        0.709601, -0.702258, -0.040109, -0.0411281,
        0.693461, 0.702715, -0.111629, 0.11333,
        0.536175, -0.536299, 0.45919, 0.462649,
        0.347191, 0.341055, 0.618793, -0.616633,
        0.0130171, -0.844079, 0.0119922, -0.535927,
        0.49317, 0.495489, 0.508495, -0.502699,
        0.709582, 0.703437, -0.0314133, 0.0261477,
        0.574456, -0.561752, -0.424362, -0.417554,
        0.671991, 0.67615, -0.214818, 0.212373,
        0.679564, 0.679318, 0.195886, -0.195826,
        0.691689, -0.684006, -0.165843, -0.161858,
        1.57554e-05, -0.216924, -0.000109005, -0.976189,
        0.43563, -1.59923e-05, 0.900126, 7.45594e-06,
        0.190438, -1.37089e-05, 0.981699, -0.000131829,
        0.701757, 0.703444, 0.0785543, -0.0808274,
        0.673909, 0.679276, -0.206662, 0.20426,
        0.0938262, -0.086792, -0.704739, -0.697859,
        0.629841, -0.628484, -0.323369, -0.322089,
        0.641749, -0.639424, -0.299873, -0.298951,
        0.062779, 0.0645923, 0.709334, -0.699093,
        0.609024, -0.60946, -0.359109, -0.358734,
        7.56167e-05, -0.606385, 0.000114371, 0.795171,
        0.0964394, -0.0959743, -0.700126, -0.700937,
        0.210554, -0.682068, 0.675021, -0.186539,
        0.66807, -0.666599, 0.23328, 0.234326,
        0.582903, 0.588666, -0.39579, 0.396291,
        0.147601, -4.65515e-05, 0.989047, -0.000416473,
        0.31166, -0.310679, -0.637577, -0.63233,
        0.407769, 9.80448e-06, 0.913085, 0.000351882,
        0.585535, 0.5902, 0.393976, -0.391912,
        0.000144212, -0.913427, -5.42844e-06, 0.407004,
        0.337214, -0.344193, -0.620472, -0.618735,
        0.187508, 0.187942, 0.688697, -0.674696,
        0.471139, -0.468302, -0.528852, -0.52824,
        0.70611, -0.700922, -0.0741931, -0.0679089,
        0.631378, -0.627508, 0.324073, 0.32027,
        0.701101, -0.696798, -0.106889, -0.107256,
        0.442779, -0.551408, 0.551342, -0.442626,
        0.00668202, -0.000137178, 0.708964, 0.705213,
        0.57873, -0.578889, -0.406816, -0.405537};//same order
    vector<Eigen::Quaterniond> quatGSFinal;
    vector<Eigen::Quaterniond> quatMyFinal;
    for (int i=0; i < sizeof(quatGsTotal)/sizeof(double); i+=4)
    {
        Eigen::Quaterniond q_gs (quatGsTotal[i], quatGsTotal[i+1], quatGsTotal[i+2], quatGsTotal[i+3]);
        Eigen::Quaterniond q_my (quatMyTotal[i], quatMyTotal[i+1], quatMyTotal[i+2], quatMyTotal[i+3]);
        quatGSFinal.push_back(q_gs);
        quatMyFinal.push_back(q_my);
    }
    double orientation_error = orientationError(quatGSFinal, quatMyFinal);
    cout<<"The orientation error is: "<<orientation_error<<endl;
}
