#include "dart/dart.hpp"
#include "dart/gui/gui.hpp"
#include "dart/collision/bullet/bullet.hpp"
#include "dart/collision/ode/ode.hpp"
#include <dart/utils/utils.hpp>
#include <iostream>
#include <fstream>
#include <string>
#include <typeinfo>
#include <math.h>
#include <stdio.h>
#include <cmath>

using namespace dart::dynamics;
using namespace dart::simulation;
using namespace dart;
using namespace utils;
using namespace std;



//const unsigned int testSize = 61884;// 127008

class MyWindow : public dart::gui::SimWindow
{
public:
    
    MyWindow(const WorldPtr& world)
    {
        setWorld(world);
    }
    
    void keyboard(unsigned char key, int x, int y) override
    {
        switch(key)
        {
            default:
                SimWindow::keyboard(key, x, y);
        }
    }
    
    void drawWorld() const override
    {
        // Make sure lighting is turned on and that polygons get filled in
        glEnable(GL_LIGHTING);
        glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
        
        SimWindow::drawWorld();
    }
    
    void timeStepping() override
    {
        SimWindow::timeStepping();
    }
protected:
};

double distanceError(vector<vector<double>> ground_truth, vector<vector<double>> my_results)
{
    if (ground_truth.size() != my_results.size())
    {
        cout<<"Something wrong with metric1's vec size!!"<<endl;
    }
    
    int N = ground_truth.size(); //N is the number of testing trajectories
    double sum = 0;
    for (int i=0; i<N; i++)
    {
        Eigen::Vector3d x_i (my_results[i][0], my_results[i][1], my_results[i][2]); //final position of trajectory i
        Eigen::Vector3d x_gs(ground_truth[i][0], ground_truth[i][1], ground_truth[i][2]); //final position of corresponding ground truth
        Eigen::Vector3d result = x_i - x_gs; // The real metric
//        Eigen::Vector3d result = x_gs; // For average
        sum += result.norm();
    }
    sum /= N;
    return sum;
}

double orientationError(vector<Eigen::Quaterniond> q_gs_vec, vector<Eigen::Quaterniond> q_i_vec)
{
    if(q_gs_vec.size() != q_i_vec.size())
    {
        cout<<"Something wrong with metric2's vec size!!"<<endl;
    }

    int N = q_gs_vec.size();
    double sum = 0;
    for (int i=0; i<N; i++)
    {
        Eigen::Quaterniond q_gs = q_gs_vec[i];
        Eigen::Quaterniond q_i = q_i_vec[i];
//        Eigen::Quaterniond q_i;
//        q_i.w()=1; q_i.x()=0; q_i.y()=0; q_i.z()=0;
        Eigen::Quaterniond invert_qgs = q_gs.inverse();
        double sc = abs((invert_qgs * q_i).w());
        sum += 2 * acos(sc);
    }
    sum /= N;
    return sum;
}

double impulseError(vector<vector<double>> gs_vec, vector<vector<double>> my_vec)
{
    if(gs_vec.size() != my_vec.size())
    {
        cout<<"There is something wrong with metric3's vec size!!"<<endl;
    }
    int N = gs_vec.size();
    double sum = 0;
    for(int i = 0; i < N; i++)
    {
        Eigen::Vector6d imp_gs;
        imp_gs<<gs_vec[i][0], gs_vec[i][1], gs_vec[i][2], gs_vec[i][3], gs_vec[i][4], gs_vec[i][5];
        
        Eigen::Vector6d imp_i;
        imp_i<<my_vec[i][0], my_vec[i][1], my_vec[i][2], my_vec[i][3], my_vec[i][4], my_vec[i][5];
        
        Eigen::Vector6d result = imp_i - imp_gs;
        
//        Eigen::Vector6d result = imp_gs;
        sum += result.norm();
    }
    sum /= N;
    return sum;
}

int main(int argc, char* argv[])
{

    WorldPtr world = SkelParser::readWorld(DART_DATA_PATH"/NN-contact-force/skel/singleBody_genData.skel");
    assert(world != nullptr);
    world->setGravity(Eigen::Vector3d(0.0, 0.0, 0));

    //Deal with first metric -- distance error
    double totalLinearPositionGS[] = {0.472793, 0.0835625, 0.907348,
        -1.31541, 0.139642, -0.692824,
        -0.835182, 0.134345, 0.398977,
        -0.258063, 0.0999998, 0.27433,
        0.203862, 0.0999975, -0.793551,
        -0.603356, 0.0999399, -0.251217,
        0.179206, 0.134334, -0.609651,
        -0.0302957, 0.0832172, -0.304748,
        0.973941, 0.0835303, -0.968613,
        0.691421, 0.0833613, -0.525862,
        -0.263045, 0.0835612, -0.148242,
        -1.07827, 0.083311, 0.00218864,
        -0.670632, 0.134307, -0.73291,
        0.283175, 0.0833697, 0.493635,
        -0.210446, 0.0999988, -0.117483,
        -0.997612, 0.0999988, 0.939687,
        -1.21082, 0.0829258, -0.835624,
        0.0600922, 0.0999998, -0.256614,
        -0.74019, 0.0999936, 0.932894,
        -0.0923801, 0.0999997, -0.109743,
        -1.00437, 0.134689, 0.372193,
        0.265732, 0.0835618, -0.0125964,
        -0.0228385, 0.0999984, 0.0996036,
        0.336493, 0.0833195, 0.472756,
        0.572938, 0.0999944, -0.264505,
        -0.85452, 0.0999949, -0.183843,
        -0.0218413, 0.0999814, 0.843408,
        -0.925049, 0.140856, 0.952096,
        0.416517, 0.083562, 0.989088,
        -0.158407, 0.0835628, 0.741182,
        -0.00979173, 0.0835625, -0.431821,
        -0.038845, 0.139999, 0.304701,
        -0.445769, 0.0999861, 0.210412,
        0.281867, 0.0999926, -0.583865,
        -0.490025, 0.139991, 0.426734,
        -0.272025, 0.139999, -0.764395,
        -0.345206, 0.0824974, -0.221881,
        0.255388, 0.0999998, 0.00852325,
        -0.00638842, 0.113129, 0.21312,
        0.22573, 0.0833903, 0.428593,
        -0.942998, 0.0999874, 1.31738,
        -0.173072, 0.134343, 0.39753,
        -0.0898876, 0.083562, -0.647528,
        -0.000350752, 0.134338, -0.632956,
        0.016206, 0.0999811, -0.30355,
        0.259207, 0.0830227, -0.882759,
        0.16721, 0.085388, 0.288947,
        -0.514484, 0.0999674, -1.08535,
        0.0382257, 0.083555, 0.449514,
        0.567952, 0.0998574, 0.309048}; // x y z
    
    double totalLinearPositionMy[] = {0.016729, 0.121715, 0.913271,
        -1.68549, 0.15893, -1.05418,
        -1.77831, 0.169033, 0.524362,
        -0.195431, 0.118082, 0.586032,
        0.444484, 0.124324, -0.946532,
        -0.611036, 0.120947, -0.446978,
        0.333263, 0.106979, -0.457965,
        -0.149964, 0.10235, -0.272126,
        1.11154, 0.117842, -1.0027,
        0.67798, 0.0884837, -0.186661,
        -0.260423, 0.105626, -0.13877,
        -1.17631, 0.144844, 0.226704,
        -0.511905, 0.122079, -1.16235,
        1.06593, 0.200931, 1.51342,
        0.267571, 0.177844, -0.167439,
        -3.08824, 0.173012, 2.0147,
        -0.847189, 0.125799, -0.894809,
        -0.126762, 0.123816, -0.312454,
        -1.76755, 0.262722, 2.17741,
        -0.223893, 0.170501, 0.589122,
        -1.45526, 0.131248, 0.214966,
        0.295478, 0.0835865, -0.0740634,
        -0.0836406, 0.120378, 0.0470068,
        0.246645, 0.143251, 1.05962,
        0.703395, 0.101207, -0.153358,
        -0.931588, 0.110188, 0.215922,
        -0.165218, 0.148247, 1.13084,
        -0.858008, 0.143548, 0.893621,
        0.495274, 0.13984, 0.478424,
        -0.924222, 0.21642, 0.745646,
        0.361322, 0.119561, -0.576146,
        0.105103, 0.131239, 0.878227,
        -1.19438, 0.117805, -0.118225,
        0.362277, 0.089309, -0.439358,
        -0.289933, 0.179384, 0.407778,
        -0.638017, 0.167307, -1.32735,
        -0.236888, 0.120509, -0.20091,
        0.383109, 0.104866, -0.030069,
        -0.242027, 0.0922166, 0.23078,
        0.45375, 0.155416, 0.360629,
        -1.32728, 0.177236, 1.63593,
        -0.136985, 0.132514, 0.548839,
        -0.477757, 0.141257, -0.576229,
        -0.49307, 0.128571, -1.66561,
        -0.559042, 0.14024, -0.315807,
        0.274336, 0.105195, -0.886754,
        0.0152813, 0.13165, -0.180305,
        -0.653832, 0.129, -1.06126,
        0.132819, 0.136586, 0.501081,
        0.771646, 0.139967, 0.479172}; // x y z

    vector<vector<double>> linearPosGS;
    vector<vector<double>> linearPosMy;
    for (int i=0; i < sizeof(totalLinearPositionGS)/sizeof(double); i+=3)
    {
        double indiGs[] = {totalLinearPositionGS[i], totalLinearPositionGS[i+1], totalLinearPositionGS[i+2]};
        double indiMy[] = {totalLinearPositionMy[i], totalLinearPositionMy[i+1], totalLinearPositionMy[i+2]};

        vector<double> vec_GS (indiGs, indiGs+sizeof(indiGs)/sizeof(double));
        vector<double> vec_my (indiMy, indiMy+sizeof(indiMy)/sizeof(double));

        linearPosGS.push_back(vec_GS);
        linearPosMy.push_back(vec_my);
    }
    double dist_error = distanceError(linearPosGS, linearPosMy);
    cout<<"Distance error of the data set is: "<<dist_error<<endl;
    

    // Deal with Third metric -- impulse error
    double totalImpGS[] = {-0.165245, 0.0692728, 0.226529, 0.482278, -1.83171, 0.911945,
        -0.0162908, -0.0519264, -0.193449, -1.82611, -0.0541887, 0.168326,
        -0.00501509, 0.0267235, 0.0918842, 0.740927, -0.829884, 0.281803,
        -0.0769991, -0.0930135, 0.152462, 1.35946, -1.44204, -0.193176,
        -0.076719, -0.130425, 0.230124, -1.05923, 1.68024, 0.599164,
        0.0124209, -0.206594, -0.160875, 1.70439, -0.0637581, 0.21347,
        0.0737789, 0.13123, 0.0146868, 1.13387, -0.853828, 1.93315,
        0.0225748, -0.199168, 0.150326, 0.832131, 1.34225, 1.6534,
        0.0367795, 0.0863538, 0.127947, -2.37625, 1.82786, -0.550582,
        0.167166, -0.289788, -0.111361, 1.58536, 1.34948, -1.13187,
        -0.0854334, 0.179775, -0.0890829, -1.92822, -1.40952, -0.995286,
        0.0820406, 0.00819617, -0.0937551, 1.21394, 1.43433, 1.18765,
        -0.00617237, -0.0116147, 0.00730049, -1.20801, 0.64051, -0.0023275,
        -0.137982, 0.274832, 0.0113211, 0.491715, 0.302463, -1.34958,
        0.0574602, -0.110341, -0.0457923, -1.6536, -1.05576, 0.469026,
        -0.0112235, 0.0481987, 0.0387154, 1.46589, 2.15747, -2.26098,
        -0.0376999, 0.0828705, -0.0747079, -2.39073, -1.56891, -0.533889,
        0.0385729, 0.0892812, 0.121354, -0.69867, 0.956103, -0.48134,
        0.0428492, 0.223265, 0.343917, -0.541537, -1.44882, 1.00802,
        0.0718998, -0.130059, -0.137405, -1.667, -1.52053, 0.566945,
        0.0952211, 0.00292676, 0.045943, 0.270706, -0.377448, -0.537018,
        -0.0367523, 0.1001, -0.265958, -0.87089, -1.76523, -0.544046,
        -0.105779, -0.106737, -0.145115, -0.31188, 2.27854, -1.44861,
        -0.141905, 0.275158, 0.0865176, -0.253348, 0.305914, -1.38846,
        -0.0242834, -0.0174731, 0.00380814, -0.355941, 0.788045, 1.3461,
        0.157024, -0.0774296, 0.111387, 0.169293, 1.88915, 1.07457,
        -0.041687, 0.0563669, 0.0253738, -0.65354, -0.799603, 0.702574,
        0.0855926, -0.258708, 0.218806, 1.23282, -0.477619, -1.04697,
        -0.0767934, 0.146126, 0.186655, -0.0952486, -1.18086, 0.885277,
        0.0497707, 0.0842065, -0.153349, -1.3064, -0.113546, -0.486353,
        0.0460959, 0.0913702, -0.0082164, -2.08329, 1.00056, -0.561015,
        -0.0145657, 0.0502865, -0.211551, -1.08119, -1.59835, -0.305492,
        -0.112256, -0.18752, -0.174034, 1.14189, -1.1969, 0.55311,
        -0.0831361, 0.173314, -0.0704232, -1.23922, -0.971727, -0.928534,
        0.00115843, -0.00658497, 0.0426811, -2.11859, -0.845891, -0.0730048,
        -0.0539916, -0.0853424, 0.226403, -1.67956, 1.9718, 0.342733,
        0.0640786, 0.0593745, -0.0757846, 0.979484, 1.01831, 0.365139,
        -0.0243885, -0.0422763, 0.0650064, -0.484391, 0.567227, 0.187162,
        0.038301, -0.104314, -0.0774214, -0.00737114, 1.53369, -2.07006,
        0.0275806, 0.0598199, -0.0418451, 1.12745, -1.41801, -1.284,
        0.0589316, -0.114083, -0.0378038, -2.37271, -1.37537, 0.451778,
        -0.0623521, 0.0639938, 0.151776, 1.29873, -0.109515, 0.579715,
        0.0392349, -0.118567, 0.100242, 2.30222, 0.649902, -0.132388,
        -0.0786767, -0.165877, -0.08524, -0.00174829, -0.425326, 0.8293,
        -0.00522355, -0.0113094, -0.00862352, -1.22418, 0.568973, -0.00466179,
        0.0460508, -0.110963, -0.0628128, -0.088365, -1.43298, 2.46669,
        -0.00330516, -0.0142917, 0.0137496, 0.761987, 0.416327, 0.61591,
        -0.0595747, -0.109491, 0.0965884, -2.31288, 1.63938, 0.431808,
        -0.0189943, -0.062279, -0.242902, -2.45439, 0.0126854, 0.188675,
        -0.0157534, -0.0340309, -0.00631054, 1.10748, -0.522188, 0.0513413};

    double totalImpMy[] = {-0.20862, 0.0323927, 0.246659, 0.565296, -2.02126, 0.743561,
        -0.0161175, -0.0512402, -0.190051, -1.83271, -0.0338971, 0.164565,
        -0.00569701, 0.0287652, 0.100398, 0.785816, -0.894899, 0.300989,
        -0.0856588, -0.107488, 0.159574, 1.4716, -1.53367, -0.24312,
        -0.0759503, -0.129508, 0.223918, -1.08759, 1.66338, 0.593162,
        0.0238184, -0.181222, -0.154964, 1.62031, -0.0471114, 0.304139,
        0.100096, 0.138456, -0.00834906, 1.14101, -0.705012, 1.98798,
        0.0264056, -0.154488, 0.11978, 0.54854, 1.29851, 1.55386,
        0.0356095, 0.0840417, 0.128228, -2.39091, 1.8366, -0.539754,
        0.172623, -0.295982, -0.123161, 1.58868, 1.41015, -1.16217,
        -0.0890624, 0.188134, -0.100091, -1.98521, -1.49306, -1.03993,
        0.111084, -0.0070143, -0.114008, 1.21529, 1.57025, 1.0875,
        -0.00736072, -0.0141135, 0.00607953, -1.26401, 0.662401, 0.00736688,
        -0.134042, 0.265653, 0.024321, 0.335168, 0.289189, -1.31151,
        0.0596102, -0.113503, -0.0571685, -1.61059, -1.09114, 0.486988,
        -0.0276036, 0.0187287, 0.00447903, 1.16097, 2.23236, -2.17956,
        -0.0378706, 0.0813765, -0.0563536, -2.42623, -1.49488, -0.528194,
        0.0447251, 0.102415, 0.129651, -0.687498, 0.992002, -0.546452,
        0.0501084, 0.228262, 0.320114, -0.465549, -1.3678, 1.0482,
        0.0744684, -0.135519, -0.13418, -1.75402, -1.54791, 0.589893,
        0.115769, -0.00439467, 0.0486271, 0.227446, -0.517649, -0.588275,
        -0.0384516, 0.101707, -0.248043, -0.967676, -1.72405, -0.556921,
        -0.131588, -0.0755503, -0.128495, -0.0715021, 2.42689, -1.3537,
        -0.142489, 0.276812, 0.0816558, -0.271072, 0.272743, -1.39761,
        -0.0392865, -0.0181677, -0.00105399, -0.372147, 0.723214, 1.40536,
        0.205346, -0.0443526, 0.105018, -0.00463335, 2.10963, 0.900025,
        -0.0593902, 0.0530806, 0.0167039, -0.62878, -0.923482, 0.698973,
        0.0855926, -0.258708, 0.218806, 1.23282, -0.477619, -1.04697,
        -0.104961, 0.117417, 0.196327, -0.0389169, -1.28291, 0.746461,
        0.0500486, 0.0865705, -0.135266, -1.37922, 0.0132822, -0.501814,
        0.0466287, 0.0926996, -0.00557687, -2.09203, 1.01813, -0.568099,
        -0.0135791, 0.0479757, -0.208174, -1.04383, -1.56278, -0.29207,
        -0.123033, -0.170102, -0.165441, 0.935996, -1.43684, 0.781242,
        -0.0878023, 0.181923, -0.0631831, -1.23976, -0.935795, -0.971603,
        0.00389397, -0.011565, 0.0377707, -2.14695, -0.884623, -0.0495227,
        -0.054295, -0.0872899, 0.212998, -1.71177, 1.92087, 0.35086,
        0.00197776, 0.00453807, 0.00251822, 1.45885, 1.67047, 0.809479,
        -0.0253804, -0.0432993, 0.0746143, -0.47986, 0.613002, 0.192504,
        0.0420707, -0.0891889, -0.0619577, 0.133725, 1.50661, -2.07797,
        0.0325848, 0.0446319, -0.0257632, 1.01759, -1.51991, -1.34605,
        0.060691, -0.11872, -0.0266198, -2.39133, -1.32876, 0.474034,
        -0.0722488, 0.0808533, 0.159111, 1.33762, -0.126747, 0.67179,
        0.0424668, -0.125907, 0.102432, 2.43, 0.702836, -0.143534,
        -0.0830386, -0.174227, -0.0814938, 0.0260656, -0.420502, 0.872436,
        -0.00515509, -0.0105354, -0.00225228, -1.26624, 0.621859, -0.010635,
        0.0534831, -0.0903781, -0.0454547, -0.239088, -1.38727, 2.47701,
        0.00108645, -0.0228607, 0.015165, 0.902235, 0.50039, 0.689682,
        -0.0637141, -0.117616, 0.0981187, -2.35415, 1.66767, 0.470374,
        -0.0158167, -0.0543875, -0.227539, -2.40264, 0.0636249, 0.151805,
        -0.0147336, -0.032071, -0.00650922, 1.14793, -0.54142, 0.0692312};
    vector<vector<double>> ImpGSFinal;
    vector<vector<double>> ImpMyFinal;
    for (int i=0; i < sizeof(totalImpGS)/sizeof(double); i+=6)
    {
        double indiGs[] = {totalImpGS[i], totalImpGS[i+1], totalImpGS[i+2], totalImpGS[i+3], totalImpGS[i+4], totalImpGS[i+5]};
        double indiMy[] = {totalImpMy[i], totalImpMy[i+1], totalImpMy[i+2], totalImpMy[i+3], totalImpMy[i+4], totalImpMy[i+5]};

        vector<double> vec_gs (indiGs, indiGs+sizeof(indiGs)/sizeof(double));
        vector<double> vec_my (indiMy, indiMy+sizeof(indiMy)/sizeof(double));

        ImpGSFinal.push_back(vec_gs);
        ImpMyFinal.push_back(vec_my);
    }
    double imp_error = impulseError(ImpGSFinal, ImpMyFinal);
    cout<<"The impulse error of data sets is: "<<imp_error<<endl;



    // Deal with second metric -- orientation error
    double quatGsTotal[] = {0.690125, 0.583555, 0.15404, -0.399328,
        0.172318, -0.570709, 0.685789, 0.417482,
        0.701294, -0.559913, 0.090569, -0.431835,
        3.98593e-08, 0.392853, -9.26485e-07, 0.919601,
        4.70731e-06, 0.947102, 2.35841e-06, 0.320933,
        0.175749, -0.000372798, 0.984435, 1.89125e-05,
        0.399867, 0.129642, -0.583196, -0.695113,
        0.512699, 0.296773, 0.4853, -0.643078,
        0.418815, 0.177773, 0.56947, -0.684613,
        0.673885, 0.545004, 0.215567, -0.449866,
        0.228271, 0.460496, -0.669248, 0.536603,
        0.366973, 0.117512, 0.605721, -0.69615,
        0.317588, 0.222028, -0.631772, -0.671346,
        0.54862, 0.342709, 0.446122, -0.6185,
        1.36154e-07, 0.683601, 4.33078e-06, -0.729856,
        0.532917, -8.40996e-07, -0.846167, 3.55962e-06,
        0.379466, 0.125869, 0.596667, -0.69581,
        0.864506, 9.72789e-07, -0.502623, -1.97038e-07,
        0.952485, 2.19886e-06, 0.304586, -8.69804e-06,
        4.09953e-07, 0.715428, 6.73056e-07, -0.698686,
        0.205302, 0.328657, -0.676656, -0.626077,
        0.0672425, -0.198988, 0.703901, -0.678532,
        0.384159, -6.18908e-06, 0.923267, -4.97456e-06,
        0.057138, -0.204833, 0.707178, -0.674298,
        3.564e-05, -0.400861, 2.61181e-05, -0.916139,
        0.969587, 5.42288e-06, 0.244749, -1.89929e-05,
        0.466664, -4.96135e-05, -0.884435, -4.13294e-05,
        0.605095, -0.61327, 0.365703, 0.352167,
        0.632507, 0.469869, 0.316119, -0.528419,
        0.266548, 0.490724, -0.654944, 0.509108,
        0.0666477, 0.323322, -0.703961, 0.628856,
        0.668585, -0.668582, 0.230209, 0.230209,
        0.000190385, 0.925144, -0.000251833, -0.379617,
        0.976257, -4.86412e-06, -0.216615, 1.31172e-05,
        0.70007, -0.700068, 0.0995173, 0.0995161,
        0.706818, -0.706817, -0.020227, -0.0202239,
        0.120745, 0.372787, -0.693826, 0.604199,
        0.390235, 5.15288e-07, -0.920715, 4.85683e-07,
        0.244287, -0.296456, -0.663569, 0.641961,
        0.698565, 0.607192, 0.109586, -0.362374,
        1.88512e-05, -0.325396, 2.40273e-05, 0.945578,
        0.605858, -0.170598, -0.364606, -0.686218,
        0.377426, 0.128356, 0.597954, -0.69536,
        0.70701, -0.508227, 0.0117083, -0.491635,
        0.948216, 9.71628e-05, 0.317625, -5.71662e-05,
        0.175907, -0.0946601, 0.685074, -0.700549,
        0.135119, -0.130373, 0.703445, -0.685501,
        2.45123e-05, -0.899926, 0.000141409, 0.436042,
        0.704126, 0.629659, 0.0648538, -0.32176,
        0.00154204, 0.642927, -0.000934026, -0.765925};//order in w x y z


    double quatMyTotal[] = {0.613974, 0.0396722, 0.77284, -0.155498,
        0.0500404, 0.565946, -0.702161, -0.429152,
        0.795399, -0.592903, 0.0384729, -0.119695,
        0.67139, 0.623504, 0.110631, 0.385018,
        0.579582, 0.365979, -0.697454, 0.20905,
        0.109374, 0.21763, 0.137946, -0.960024,
        0.136447, -0.922909, -0.0705241, -0.353054,
        0.814003, -0.0482329, -0.578772, -0.00975499,
        0.248727, -0.189307, 0.653957, -0.688939,
        0.107689, -0.174863, 0.677832, -0.705953,
        0.213594, 0.525461, -0.687859, 0.452901,
        0.389663, 0.71041, 0.583837, 0.0511312,
        0.0829751, -0.831046, -0.0609216, -0.546595,
        0.390057, 0.160348, -0.889919, -0.173747,
        0.148984, -0.0227653, 0.770555, 0.619298,
        0.198401, -0.0449683, -0.683749, -0.700787,
        0.310787, 0.306636, 0.336382, -0.834406,
        0.305845, 0.165723, 0.606563, 0.714896,
        0.618613, 0.0258653, -0.719192, -0.315298,
        0.148688, 0.248818, -0.379247, -0.878723,
        0.610409, 0.549529, -0.25109, 0.512223,
        0.0650926, 0.288212, -0.777378, 0.555319,
        0.0700585, 0.0795733, -0.990726, -0.0849876,
        0.244946, 0.179634, 0.930808, -0.203295,
        0.200721, 0.223552, -0.661562, 0.687075,
        0.081031, -0.874935, -0.0139013, -0.477209,
        0.667381, -0.607285, 0.291796, 0.317275,
        0.312784, -0.682442, 0.592653, 0.291892,
        0.491107, -0.521376, -0.498838, -0.487997,
        0.474496, 0.272233, 0.389423, 0.741008,
        0.689298, 0.642106, 0.124259, 0.311655,
        0.137596, -0.881217, 0.0278762, -0.451384,
        0.0808522, 0.948771, -0.0316165, -0.303804,
        0.728869, 0.622195, -0.0191223, -0.285058,
        0.503149, -0.641098, 0.485763, -0.31602,
        0.658313, -0.438151, 0.611838, -0.0173713,
        0.478732, 0.088615, 0.760817, -0.429093,
        0.487477, 0.0802297, 0.857405, -0.144175,
        0.540402, 0.409322, 0.496348, -0.542273,
        0.670807, -0.17566, -0.717869, 0.0618565,
        0.629017, 0.496766, 0.298101, 0.518361,
        0.490519, -0.73333, 0.470654, 0.0101303,
        0.120812, -0.491263, 0.741793, 0.440236,
        0.0406846, 0.330916, 0.668586, -0.664704,
        0.114497, 0.0904845, 0.982774, -0.113393,
        0.0360284, 0.363049, 0.0444312, -0.930012,
        0.0051123, 0.0879539, 0.144341, 0.985598,
        0.402305, 0.696397, 0.592853, -0.0413306,
        0.643492, 0.663137, -0.148681, -0.352225,
        0.0260027, -0.531733, -0.557539, 0.636973};//same order
    vector<Eigen::Quaterniond> quatGSFinal;
    vector<Eigen::Quaterniond> quatMyFinal;
    for (int i=0; i < sizeof(quatGsTotal)/sizeof(double); i+=4)
    {
        Eigen::Quaterniond q_gs (quatGsTotal[i], quatGsTotal[i+1], quatGsTotal[i+2], quatGsTotal[i+3]);
        Eigen::Quaterniond q_my (quatMyTotal[i], quatMyTotal[i+1], quatMyTotal[i+2], quatMyTotal[i+3]);
        quatGSFinal.push_back(q_gs);
        quatMyFinal.push_back(q_my);
    }
    double orientation_error = orientationError(quatGSFinal, quatMyFinal);
    cout<<"The orientation error is: "<<orientation_error<<endl;
}
